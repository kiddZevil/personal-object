/**
 * 思路：
 * 1、先用require插件通过依赖关系压缩合并js
 * 2、cssMini方法合并index.html引用的css样式
 * 3、图片压缩
 * 4、读取requirejsMain。js的path配置文件并存储
 * */
var
    rjs = require('requirejs')
    ,fs = require('fs')
    ,connect=require('gulp-connect')
    ,httpUrl = require('url')
    ,mock=require('mockjs')
    ,Tool = require('./tool')//md5 工具
    ,path=require('path')
    ;

/* ==========================================================================
项目压缩合并插件
 ============================================================================ */

var Release = function (option,cd) {
    this.option = option;
    //this.Tool = Tool;//md5 工具
    this.md5FileConf = {};//存放加密后文件列表信息
    this.imgFile = {};
    this.fileArr = [];//存放releae目录下有效文件地址
    this.mainConfigFileArr = '';//requirejsMain.js 压缩后的文件文本内容
    this.option["modules"] = eval(readFileSync(this.option.modules,true));
    this.deleteFileConfig=eval(readFileSync(this.option.deleteFileConfig,true));
    this._rjs(cd);
};

Release.prototype._rjs=function (cd) {
    var _this = this;
    console.log("requirejs is:start");
    rjs.optimize({
        appDir: _this.option.appDir,
        baseUrl: _this.option.baseUrl,
        mainConfigFile: _this.option.appDir +_this.option.mainConfigFile,
        dir: _this.option.dir,
        optimize: _this.option.optimize,
        preserveLicenseComments: _this.option.preserveLicenseComments,
        optimizeCss: _this.option.optimizeCss,
        modules: _this.option.modules
    }, function () {
        console.log("requirejs is:end");
        _this._release();
        cd();
    }, cd);
};

Release.prototype._release=function (cd) {
    this.mainConfigFile=this.option.dir + this.option.mainConfigFile;//requirejsMain.js 压缩后的文件地址路径
    this.mainConfigString=readFileSync(this.mainConfigFile,true);
    this.noReleaseConfig=(this.option.noReleaseConfig?this.option.noReleaseConfig:[]);//发布生产环境后不应该包括的文件已经文件夹
    //this._rel(cd);
    console.log("===================================");
    console.log("Add the version number to img is:start");
    this._imgAddMd5();
    console.log("Add the version number to img is:end");
    console.log("Combination of CSS is :start");
    cssMini(this.option.css,this.option.cssMini,this.option.dir);
    console.log("Combination of CSS is :end");
    console.log("===================================");
    console.log("To regenerate the html is:start");
    writeHtml(this.option._index,this.option.index,true);
    console.log("To regenerate the html is:end");
    console.log("===================================");
    console.log("===================================");
    console.log("To get the requireMain.js is:start");
    this.requireMain=getRequireMain(this.mainConfigString);
    console.log("To  get the requireMain.js is:end");
    this.requireMain["paths"]=getMd5RequireMain(this.getRevision(true,true), this.requireMain);
    this.requireMain["baseUrl"]=this.option.dir;
    this.requireMain["urlArgs"]=function(id, url) {
        if (url.match("\.tpl$")) {
            return '?v='+Math.random();
        }
    };
    console.log("===================================");
    console.log("To regenerate the requireMain.js is:start");
    writeRequireMain(this.mainConfigFile,this.mainConfigString,this.requireMain);
    console.log("To regenerate the requireMain.js is:end");
    console.log("===================================");
    console.log("Project completed packaging");

};

/**
 * 循环目录返回 文件地址路径信息
 *  回调函数返回值为：
 *  filePath: 文件地址
 *  suffix:文件扩展名
 *  fileName: 文件名
 * */
Release.prototype._loopFile=function(loopCallback){
    var _this=this;
    if(!this.fileArr.length){
        var loop = function (dir, callback) {
                var files = fs.readdirSync(dir);
                files.forEach(function(fileItem){
                    var fileItemObj={
                        filePath:dir + fileItem,//文件或者地址全路径
                        suffix:path.extname(dir + fileItem),//文件扩展名，为文件夹是为空
                        fileDir:dir //文件所在目录，或者文件夹上一个目录
                    };
                    if(is_delete(_this.deleteFileConfig,fileItemObj,_this.option.dir)){
                        //删除不需要的文件或者文件夹
                        deleteFile(fileItemObj.filePath)
                    }else{
                        if (!fs.lstatSync(fileItemObj.filePath).isDirectory()) {
                            callback && callback(fileItemObj.filePath, fileItem);
                        } else {
                            loop(fileItemObj.filePath + "/", callback)
                        }
                    }

                });
        };
        loop(this.option.dir, function (filePath, filesName) {
            var fileObj={
                filePath: filePath,
                suffix:path.extname(filePath),
                fileName: filesName
            };
            _this.fileArr.push(fileObj);
            loopCallback && loopCallback(fileObj);
        });
    }else{
        //避免多次循环文件
        this.fileArr.forEach(function(item){
            loopCallback && loopCallback(item)
        });
    }

};

//对外暴露方法
//获取文件名对应版本号信息
Release.prototype.getRevision = function (is_noSuffix, is_js) {
    var _this = this,
        revision = {},
        revisionFun = function (file) {
            var string = readFileSync(file.filePath);
            var fileName = (is_noSuffix ?
                    Tool.path_without_ext(file.filePath)
                    :
                    file.filePath
            ).replace(_this.option.dir, "");
            revision[fileName] = file.filePath.replace(_this.option.dir, "") + "?v=" + Md5(string);
        };
    this._loopFile(function (file) {
        if (is_js) {
            if (file.suffix == '.js') {
                revisionFun(file)
            }
        } else {
            revisionFun(file)
        }
    });
    return revision;
};

//图片MD5加密加版本号
Release.prototype._imgAddMd5 = function () {
    var _this=this,root=this.option.dirRoot,
        writeImgSync=function(filePath,string){
            fs.writeFileSync(filePath,string.replace(new RegExp(_this.option.appDir,"g"),_this.option.dir),"utf-8")
        };
    this._loopFile(function (file) {
        var string=readFileSync(file.filePath, true), arr = [];
        if(!string) return false;
        if (/.(js|tpl)$/g.test(file.suffix)) {
            arr = unique(string.match(/<img[^>]*>/g));
            if (arr && arr.length) {
                arr.forEach(function (item) {
                    var src = item.match(/src=(\'|\")[^\1]*?\1/g);
                    if (!src||!(/.(png|gif|jpg)/g.test(src[0]))) return false;
                    src = src[0].replace("src=", "module.exports=");
                    src = eval(src);
                    var imgPath = root+ Tool.join_path("./", src);
                    if (fs.existsSync(imgPath) && (/.(png|gif|jpg)$/g.test(src))&&(src.indexOf("?v=")<=-1)) {
                        string = string.replace(new RegExp(src, 'g'), src + "?v=" + Md5(readFileSync(imgPath)));
                    }
                });
            }
            writeImgSync(file.filePath,string);
        }
        if (/.(css|js)$/g.test(file.suffix)) {
            arr = unique(string.match(/url[^\(]*?\([^\)]*?\.(png|gif|jpg)(\'|\")*?\)/g));
            if (arr && arr.length) {
                arr.forEach(function (item) {
                    var src = item.replace(/url[^\(]*?\(/g, "").replace(")", "").replace(/(\'|\")/g, "");
                    var imgPath =Tool.join_path(file.filePath.replace(file.fileName, ""), src);
                    if (fs.existsSync(imgPath) ) {
                        if((/.(png|gif|jpg)$/g.test(src))&&(src.indexOf("?v=")<=-1)){
                       /*     console.log("rootImgPath:"+root+imgPath);
                            console.log("rootImgPath:"+imgPath);
                            console.log("srcIMG:"+src);
                            console.log("====================================================");*/
                            string = string.replace(new RegExp(src, 'g'),src + "?v=" + Md5(readFileSync(imgPath)));
                        }
                    }else{
                        imgPath = Tool.join_path(file.filePath.replace(file.fileName, ""),'../'+src);
                        if (fs.existsSync(imgPath)&&(/.(png|gif|jpg)$/g.test(src))&&(src.indexOf("?v=")<=-1) ) {
                           /* console.log("imgPath:"+imgPath);*/
                            //console.log("rootImgPath:"+root+imgPath);
                            string = string.replace(new RegExp(src, 'g'),src + + "?v=" + Md5(readFileSync(imgPath)));
                        }else{
                            //console.log("图片："+src+"  不存在")
                        }
                    }
                });
            }
            writeImgSync(file.filePath,string);
        }
    });
};

//css 合并
function cssMini(fileIn, fileOut,dir){
    var finalCode=[];
    fileIn.forEach(function(flieInItem){
        finalCode.push(readFileSync(dir+flieInItem,true));
    });
    fs.writeFileSync(dir+fileOut, finalCode.join(""), 'utf8');
}

//获取加密后的requireConfig.path配置
function getMd5RequireMain(revision,config){
    var paths = config.paths;
    for (var key in paths) {
        if (revision[paths[key]]) {
            revision[key] = revision[paths[key]];
            delete revision[paths[key]];
        }else{
            revision[key] = paths[key];
        }
    }
    return revision
}

//获取requireConfig配置
function getRequireMain(mainConfigSting){
    return eval("var require={},exports;require.config=function(option){exports =option;};"+mainConfigSting+";module.exports =(exports?exports:require);")
}

//重写 requireConfig
function writeRequireMain(FileDir,mainConfigSting,config){
    var configString=mainConfigSting.match(/require.config\(\{[\s\S]*?(\}\))/g);
    if(configString){
        configString=configString[0];
        mainConfigSting=mainConfigSting.replace(configString,"require.config("+JSON.stringify(config)+")");
    }else{
        mainConfigSting="var require="+JSON.stringify(config);
    }
    fs.writeFileSync(FileDir,mainConfigSting , 'utf8');
}

//重新生成html
function writeHtml(_html, html, is_release) {
    var string = readFileSync(_html, true),
        ifArr = string.match(/<(#if)[^>]*>[\s\S]*?<\/\1>/g)
        ;
    if (ifArr) {
        ifArr.forEach(function (item) {
            /*替换流程*/
            //    <#if ->  if(
            //    </#if> ->  '}
            //    <#else> -> '}else{str='
            //    >  -> ){str='
            var ite = item.replace("<#if", "if(").replace("<\/#if>", "'}").replace("<#else>", "'}else{str='").replace(/>[^>][1]?/, "){str='");
            string = string.replace(item, eval("var isRelease=" + (is_release ? "true" : "false") + ",str='';" + (ite.replace(/\n/g, "$n").replace(/\r/g, "$r")) + ";module.exports=str").replace(/\$n/g, "\n").replace(/\$r/g, "\r"));
        })
    }
    var scriptArr = string.match(/<(script)[^>]*(src)[1]?[^>]*>[\s\S]*?<\/\1>/g),
        linkArr = string.match(/<(link)[^>]*?>/g);
    scriptArr.forEach(function (item) {
        var src=item.match(/src=(\'|\")[^\1]*?\1/g)[0].replace("src=","module.exports=");
        src=eval(src);
        src=Tool.join_path("./",src);
        if(fs.existsSync(src)&&(path.extname(src)=='.js')){
            string = string.replace(src, src+"?v="+Md5(readFileSync(src)));
        }
    });
    linkArr.forEach(function (item) {
        var src=item.match(/href=(\'|\")[^\1]*?\1/g)[0].replace("href=","module.exports=");
        src=eval(src);
        src=Tool.join_path("./",src);
        if(fs.existsSync(src)&&(path.extname(src)=='.css')){
            string = string.replace(src, src+"?v="+Md5(readFileSync(src)));
        }
    });
    fs.writeFileSync(html,string ,'utf8')
}
//md5 统一加密方法
function Md5(string){
   return Tool.md5(string).slice(0,7)
}

//判断文件或者文件夹是否是可删除
function is_delete(config,file,root){
    var is_delet=false;
    if(root){
        file={
            filePath:file.filePath.replace(root,''),
            suffix:file.suffix,
            fileDir:file.fileDir.replace(root,'')
        };
    }
    config.forEach(function(configItem){
        if((configItem==file.filePath)||(configItem==file.fileDir)){
            is_delet=true ;
            return false;
        }else{
            var configItemArr= configItem.split("*");
            if((configItemArr.length==1)&&(configItemArr[1]==file.suffix)){
                is_delet=true ;
                return false;
            }else if((configItemArr.length==2)&&(configItemArr[0].indexOf(file.fileDir)==0)&&(configItemArr[1]==file.suffix)){
                is_delet=true ;
                return false;
            }
        }
    });
    return is_delet
}
/**
 * 根据地址创建目录以及文件
 *  参数1：创建文件的路径地址
 *  参数2：文件数据
 *  参数3：是否采用utf-8
 * */
function writeFile(paths,string,is_utf8){
    if(fs.existsSync(paths)){
        //该path地址文件已经存在
        fs.writeFileSync(paths,string,is_utf8&&'utf8');
    }else{
        //该path地址文件不存在
        var p='';
        paths.split("/").forEach(function(ite){
            p=(p?(p+"/"):"")+ite;
            if(!fs.existsSync(p)){
                //目录不存在情况
                if (p==paths) {
                    fs.writeFileSync(p,string,is_utf8&&'utf8');
                }else{
                    fs.mkdirSync(p)
                }
            }else{
                //目录存在情况
                if (!fs.lstatSync(p).isDirectory()) {
                    fs.writeFileSync(p,string,is_utf8&&'utf8');
                }
            }
        });
    }

}
//数组去重复
function unique(arr) {
    if(arr){
        var result = [], hash = {};
        arr.forEach(function(item){
            if (!hash[item]) {
                result.push(item);
                hash[item] = true;
            }
        });
        return result;
    }else{
        return arr
    }
}

/* ==========================================================================
 服务启动插件
 ============================================================================ */

var Connect =function(option){
    connect.server({
        port: option.port,
        root: option.root,
        livereload: option.livereload,
        middleware: function(connect, options) {
            return [
                function(req, res, next) {
                    res.setHeader('Access-Control-Allow-Origin', '*');
                    res.setHeader('Content-Language', 'zh-CN');
                    //res.setHeader('Content-Type', 'text/html;charset=UTF-8');
                    var url=(req.url.split("?")[0].replace(option.proxyRoot+'/',""));
                    var filepath = path.join(options.root,url);
                    var resEnd;
                    var suffix=path.extname(filepath);
                    if(suffix){
                        if(fs.existsSync(filepath)){
                            if(/.(css)$/g.test(suffix)){
                                resEnd=readFileSync(filepath,true)
                            }else{
                                resEnd=readFileSync(filepath)
                            }
                        }
                    }else if(fs.existsSync(filepath+"/index.html")){
                        resEnd=readFileSync(filepath+"/index.html",true)
                    }else{
                        res.setHeader('Content-Type', 'text/html;charset=UTF-8');//解决返回数据中文格式乱码问题
                        var query=httpUrl.parse(req.url, true).query,
                         data=eval(readFileSync(option.mockConfig,true));
                        url=url.replace(/^\//,"");
                        if(data[url]){
                            if(typeof data[url] == 'string'){
                                filepath= Tool.join_path(options.root,option.dataDir+data[url]);
                            }else if(typeof data[url] == 'object'){
                                var jsonFile=data[url][query[option.uid?option.uid:"uid"]];
                                filepath=(jsonFile?Tool.join_path(options.root,option.dataDir+jsonFile):"");
                            }
                            if(filepath&&fs.existsSync(filepath)){
                                resEnd= JSON.stringify(mock.mock(eval("module.exports ="+readFileSync(filepath,true))));
                            }
                        }else{
                            console.log("The url "+url+"  corresponding data does not exist");
                        }
                    }
                    return (typeof resEnd !='undefined')?res.end(resEnd): next();
                }
            ];
        }
    });
};
//删除文件或者问价夹
function deleteFile(path) {
    var files = [];
    if( fs.existsSync(path) ) {
        if(fs.lstatSync(path).isDirectory()){
            //文件夹
            files = fs.readdirSync(path);
            files.forEach(function(file,index){
                var curPath = path + "/" + file;
                if(fs.statSync(curPath).isDirectory()) {
                    deleteFile(curPath);
                } else {
                    fs.unlinkSync(curPath);
                }
            });
            fs.rmdirSync(path);
        }else{
            //文件
            fs.unlinkSync(path);
        }
    }

}
//读取文件方法
function readFileSync(path,is_utf8){
    if(fs.existsSync(path)){
        if(!is_utf8){
            return fs.readFileSync(path)
        }else{
            return fs.readFileSync(path,'utf8')
        }
    }else{
        console.log("file "+path+" is not exists");
        return ""
    }
}

//解析字符串并当做js执行
function evalFun(string){
    return eval("module.exports ="+string)
}
/* ==========================================================================
 拷贝组件到项目
 ============================================================================ */

var copyCompts =function(option){
    this.option=option;
    this.comptsDir=option.compts;
    loopCompts(this.comptsDir,option.deleteFileConfig,function(file){
        var distDir=file.filePath.replace(option.compts,option.dist);
        switch (file.suffix){
            case ".js":
                var jsString=readFileSync(file.filePath,true);
                jsString=comptsJsDirReplace(jsString,option.compts,option.dist.replace(option.appDir,""));
                writeFile(distDir,jsString,true);
                break;
            case ".css":
                writeFile(distDir,readFileSync(file.filePath,true),true);
                break;
            case ".tpl":
                writeFile(distDir,readFileSync(file.filePath,true),true);
                break;
            default :
                writeFile(distDir,readFileSync(file.filePath));
                break;
        }
    /*    console.log("==========================");
        console.log(file.filePath);
        console.log(distDir);*/
    })
};
//js 地址替换
function comptsJsDirReplace(string,compts,dist){
    return string.replace(new RegExp("../"+compts,"g"),dist);
}
//循环组件目录
function loopCompts(dirPath,deleteFileConfig,callback,root){
    var files = fs.readdirSync(dirPath);
    files.forEach(function(fileItem){
        var fileItemObj={
            filePath:dirPath + fileItem,//文件或者地址全路径
            suffix:path.extname(dirPath + fileItem),//文件扩展名，为文件夹是为空
            fileDir:dirPath //文件所在目录，或者文件夹上一个目录
        };
        if(is_delete(deleteFileConfig,fileItemObj,root?root:dirPath)) return false;
        if (!fs.lstatSync(dirPath + fileItem).isDirectory()) {
            callback && callback(fileItemObj);
        } else {
            loopCompts(dirPath + fileItem + "/",deleteFileConfig,callback,dirPath)
        }
    });
}

module.exports = {
    release:function(option){
       return new Release(option)
    },
    connect:Connect,
    copyCompts:function(option){
        return new copyCompts(option)
    }
};